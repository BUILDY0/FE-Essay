function Foo(){ this.getName = function(){console.log('1')}; return this;}
Foo.getName = function() { console.log('2'); };
Foo.prototype.getName=function(){console.log('3');};
var getName=function(){console.log('4')};
function getName(){console.log('5');};

// 打印
Foo.getName();
getName();
Foo().getName();
getName();
new (Foo.getName)();
(new Foo()).getName();

---

实现 mergePromise 函数，把传进去的数组顺序先后执行，并且把返回的数据先后放到数组 data 中

const timeout = ms =>
  new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve()
    }, ms)
  })

const ajax1 = () =>
  timeout(2000).then(() => {
    console.log('1')
    return 1
  })

const ajax2 = () =>
  timeout(1000).then(() => {
    console.log('2')
    return 2
  })

const ajax3 = () =>
  timeout(2000).then(() => {
    console.log('3')
    return 3
  })

const mergePromise = ajaxArray => {
  // 在这里实现你的代码
}

mergePromise([ajax1, ajax2, ajax3]).then(data => {
  console.log('done')
  console.log(data) // data 为 [1, 2, 3]
})

// 分别输出
// 1
// 2
// 3
// done
// [1, 2, 3]

---

写一个定时器 mySetInterVal(fn, a, b),每次间隔 a,a+b,a+2b,...,a+nb 的时间执行fn，然后写一个 myClear，停止上面的定时器 mySetInterVal